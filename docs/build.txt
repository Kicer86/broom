
Before first build update git submodules with:
git submodule update --init --recursive

or clone whole repo with --recursive option:

git clone --recursive https://github.com/Kicer86/photobroom.git


Required tools and libraries:
 - cmake - version 3.12 or later
 - Qt5 - version 5.15 or higher
 - exiv2*
 - OpenLibrary*
 - dlib*

 Optional libraries:
 - KCrash + drkonqi (for crash catching)

 Packages, libraries and other components kept as git submodules:
 - https://github.com/google/googletest.git                     - GMock and GTest  (unit tests)
 - https://github.com/Kicer86/cmake_modules.git                 - various cmake modules and package finders
 - https://github.com/ageitgey/face_recognition_models.git      - modules for face recognition
 - git://anongit.kde.org/kwidgetsaddons.git                     - kdewidgets

* For convenience it is possible to use conan tool
  for download, build and install all marked libraries.

  Conan setup:
  - Required conan repositories:
    conan remote add piponazo https://api.bintray.com/conan/piponazo/piponazo;
    conan remote add kicer https://api.bintray.com/conan/kicer86/kicer;

  - running conan:
    Go to build dir and execute:
    conan install /source/dir --build


Tested compilers (with c++17 support):
1. gcc (Linux and Windows)

2. clang (Linux)
    - broken due to https://bugs.llvm.org/show_bug.cgi?id=38485

3. Visual studio 2019 (Windows)


PhotoBroom cannot be run from build directory without installation step.
On Linux it will search for plugins in destination (installation) directory.
Build 'install' target to install PhotoBroom. Then you can launch it.
On Windows operating system, PhotoBroom searches for plugins and translations,
in location relative to exe file.

There is CMake DEVELOPER_BUILD variable available to ease debugging.
On Windows, DEVELOPER_BUILD option will force PhotoBroom to look for plugins and translations in location
defined by CMAKE_INSTALL_PREFIX (so as it does on Linux) not in build directory.
This will allow you to launch PhotoBroom from build directory after 'install' step.



Extra targets available for Windows:
'deploy'  prepares extra dir with all external dependencies required by PhotoBroom.
'install' install PhotoBroom with all external dependencies
'package' target will create a package (Installator) with all files required for running
          PhotoBroom on other Windows machines.
