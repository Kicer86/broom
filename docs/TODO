
Sets of tasks: finished, to be done and dropped

TODO:
- use faster thumbnailer (https://code.google.com/p/ffmpegthumbnailer/)
- performance: when updating photo, do not update all, update only required data
- finding and reacting on duplicates
- update photo in db when tags change
- rename hash to sha256
- when new node (IdxData) is dynamically added, move it to right position (sorted)
- cleanups in cmake: move 'test' stuff to 'test' directories
- cleanups in cmake: nicer dealing with alternative libraries


ver 1.0 requirements:
- do stress and crash tests
- gui improvements: move stagging area to menu->add photos
- use more smart tags updating
- rethink configuration concepts
- log files
- new view for photos
- in view add entry for not matching photos
- store 'exif loaded' flag in database
- check if tags are being updated correctly in all known cases
- gui improvements: projects management
- gui improvements: general enhancements


IN PROGRESS:


DONE:
- database should work in separate thread. Data model when asked on non fetched photos should return some empty list, and refresh proper node while data are being fetched
- PhotoInfo: review and refactor flags structs
- gui: 'save photos' button must switch 'staging area' flag
- database: react properly when photo already in database (updating photo)
- divide ASqlBackend into at least two smaller: one - implementation for IBackend, second, for SqlQueries builders
- core: PhotoInfo should store information about which data have been loaded and which not. Even empty photo should be stored in database and updated on every change
- Model: filter out top level groups without any children
- boost doesn't seem to be necessary. Remove it
- enhancing analyzer: run in thread, go throu dir hierarchy
- fix performance issue when photos location is slow. Cache file for sha256 and thumbnail generation (maybe other actions)
- core: make photos tagger a new task
- gui improvements: filters and hierarchy management (basic)
- allow to load not fully loaded photos to db
- add 'exif' type of data for PhotoInfo
- introduce PhotoInfo manager in database
- PhotoInfo should be owned by database
- PhotoInfo should be an interface
- load missing PhotoInfo's data when one is found
- PhotoInfo should not be directly being built by ASqlBackend. Introduce PhotoInfo builder
- model: react on changes in database
- support for some extra exif library, probably more windows friendly than exiv2
- Staging Model: automatically move added photos to right positions
- support for http://www.lysator.liu.se/~nisse/nettle/ as an alternative to OpenSSL
- make PhotoInfo::tags thread safe and do not overwrite data
- load all database plugins. Choose right backend basing on project settings.
- introduce project concept
- database plugin interface enhacements (backend name)
- project creation


DROPPED:
- task executor: turn off threads when not needed. REASON: hard to achieve
- introduce PhotoInfo's snapshots. Idea is to send to database well known state of PhotoInfo REASON: doesn't seem to be so necessary, while was causing some problems with passing something different than IPhotoInfo to database (emitting right signals etc)
- database: priorities for tasks store should be more important than update REASON: not an issue already - SQLite performance was improved. Stores to db are fast.
