
language: cpp
dist: bionic
osx_image: xcode11.6

branches:
  only:
    - master
    - travis_test

addons:
  apt:
    packages:
      - python3
      - lcov
      # - libdlib-dev    - enable in future, current version is too old
      - nasm
    sources:

  homebrew:
    packages:
      - qt5
      - exiv2
      - dlib
    update: true

notifications:
  on_failure: never
  on_success: never

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  - DEBUG=0

matrix:
  exclude:
    - os: osx
      compiler: gcc
  include:
    - os: linux
      compiler: gcc
      env: DEBUG=1

cache:
    - ccache: true
    - directories:
        - $HOME/conanData           # Conan storage location
        - $HOME/tools               # tools like CMake
        - conan                     # Conan installation folder

before_install:
  # setup tools for particular system
  - if [ $TRAVIS_OS_NAME == 'osx' ]; then
        brew upgrade pyenv;
        eval "$(pyenv init -)";
        export PATH="/usr/local/opt/qt/bin:$PATH";
        sudo pip install virtualenv;
        virtualenv conan;
        source conan/bin/activate;
        brew install ccache;
        export PATH="/usr/local/opt/ccache/libexec:$PATH";
    else
        sudo add-apt-repository -y ppa:beineri/opt-qt-5.11.1-bionic;
        sudo apt install qt511base qt511svg qt511quickcontrols2  libgl-dev lcov;
        source /opt/qt5*/bin/qt5*-env.sh;
        pyenv global 3.7;
    fi

  - sudo pip install conan;
    conan remote add piponazo https://api.bintray.com/conan/piponazo/piponazo;
    conan remote add kicer https://api.bintray.com/conan/kicer86/kicer;
    conan remote add omaralvarez https://api.bintray.com/conan/omaralvarez/public-conan;
    conan config set storage.path=$HOME/conanData;

before_script:
  - if [ $DEBUG -eq 1 ]; then
        EXTRA_CMAKE_OPTIONS="-DENABLE_CODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug";
    fi

  - conan profile new default --detect;
    cat ~/.conan/profiles/default;

  # photo broom
  - mkdir build && cd build
  - conan install .. --build -s compiler.cppstd=11 &> /dev/null
  - cmake -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/usr
          -DBUILD_UPDATER=ON
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          ${EXTRA_CMAKE_OPTIONS}
          ..

script:
  - make
  - if [ $TRAVIS_OS_NAME != 'osx' ]; then
        xvfb-run -e /dev/stdout ctest -V -L UnitTest;
    fi


after_success:
  - if [ $DEBUG -eq 1 ]; then
        cd ${TRAVIS_BUILD_DIR}/build;
        xvfb-run -e /dev/stdout make run_unit_tests_code_coverage;
        lcov --directory . --capture --output-file coverage.info;
        lcov --remove coverage.info '/usr/*' --output-file coverage.info;
        lcov --list coverage.info;
        bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports";
    fi
